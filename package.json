{
  "name": "calculated-cached-properties",
  "description": "CalculatedCachedProperties allows properties to have values calculated by a function, and then cached. You can then manually invalidate (clean) the cache for one or more (or all) properties, forcing the function to be invoked and recalculate next time the property is accessed. You can also set the value of a property manually. Undefined / null etc are all valid property values. Works with POJSOs, JS constructors and CoffeeScript classes (i.e `MyClass extends CalculatedCachedProperties`, and then just call `super` constructor). A spinoff from uBerscore library. Docs will follow, see the specs till then :-)",
  "version": "0.2.1",
  "homepage": "https://github.com/anodynos/calculated-cached-properties",
  "author": {
    "name": "Angelos Pikoulas",
    "email": "agelos.pikoulas@gmail.com"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "keywords": [
    "calculated",
    "cached",
    "cache",
    "property",
    "properties",
    "objects",
    "constructors",
    "coffeescript class"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/anodynos/calculated-cached-properties"
  },
  "bugs": {
    "url": "git://github.com/anodynos/calculated-cached-properties/issues",
    "email": "agelos.pikoulas@gmail.com"
  },
  "main": "./build/min/CalculatedCachedProperties-min.js",
  "scripts": {
    "test": "grunt release"
  },
  "engines": {
    "node": ">=0.8"
  },
  "devDependencies": {
    "chai": "^1.9.2",
    "mocha": "1.x.x",
    "lodash": "*",
    "grunt": "0.4.5",
    "grunt-urequire": "0.7.x",
    "grunt-contrib-watch": "0.5.x",
    "urequire": ">=0.7.0-beta.17",
    "urequire-rc-inject-version": "^0.1.5",
    "urequire-rc-import-keys": "^0.1.3",
    "urequire-ab-specrunner": "^0.2.1",
    "uberscore": "0.0.17"
  }
}
